@page "/"
@using Chat.WebBlazorServer.Models
@using Microsoft.SemanticKernel.ChatCompletion
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Semantic Kernel Chat</PageTitle>

<div class="text-center">
</div>

<div id="chatHistory" style="height: 65vh" class="history container border shadow rounded m-2 p-2">
    <ChatHistoryDisplay ChatHistory="@chatModel.ChatHistory" />
</div>

<div style="height: 15vh" class="container-fluid">
    <div class="row">
        <label class="mt-3 form-label" for="promptInput">Prompt</label>
    </div>
    <div class="row">
        <div class="col-11">
            <textarea id="promptInput" class="form-control" placeholder="Press ctrl+enter to submit prompt" @bind="chatModel.Prompt" rows="3" @onkeydown="HandleKeyDown"></textarea>
        </div>
        <div class="col-1">
            <input type="button" value="Submit" class="btn btn-primary" @onclick="SubmitChat" />
        </div>
    </div>
</div>

@code {
    private ChatModel chatModel = new ChatModel("You are a friendly AI chatbot that helps users answers questions. Always format response using markdown");
    private string? RequestId { get; set; }
    private bool ShowRequestId => !string.IsNullOrEmpty(RequestId);

    protected override void OnInitialized()
    {
        // This is where you would typically initialize your chat model or load history
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.CtrlKey && e.Key == "Enter")
        {
            await SubmitChat();
        }
    }

    private async Task SubmitChat()
    {
        if (string.IsNullOrWhiteSpace(chatModel.Prompt))
        {
            // Optionally add some visual feedback here
            return;
        }

        // Add user message to history
        chatModel.ChatHistory.AddUserMessage(chatModel.Prompt);
        StateHasChanged(); // Update UI to show user's message

        // Simulate AI response (replace with actual API call)
        var userPrompt = chatModel.Prompt;
        chatModel.Prompt = string.Empty; // Clear prompt input

        // This would be an actual API call to your backend
        // For now, let's simulate a response
        try
        {
            var response = await Http.PostAsJsonAsync(Navigation.ToAbsoluteUri("/Home/Chat"), chatModel);
            response.EnsureSuccessStatusCode();
            var updatedChatModel = await response.Content.ReadFromJsonAsync<ChatModel>();
            if (updatedChatModel != null)
            {
                chatModel.ChatHistory = updatedChatModel.ChatHistory;
            }
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error submitting chat: {ex.Message}");
            chatModel.ChatHistory.AddAssistantMessage($"Error: {ex.Message}");
        }
        
        StateHasChanged(); // Update UI with AI's response
        await ScrollToBottom();
    }

    // JavaScript interop for scrolling
    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom");
    }

    // Need to inject IJSRuntime for interop
    [Inject]
    public required IJSRuntime JSRuntime { get; set; }
}
